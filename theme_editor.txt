Theme Model

const mongoose = require("mongoose");

const themeSchema = new mongoose.Schema({
    name:{
        type: String,
        required: true
    },
    backgroundColour:{
        type: String,
        required: true
    },
    backgroundGradient:{
        type: String,
        required: true
    },
    primaryColour:{
        type: String,
        required: true
    },
    secondaryColour:{
        type: String,
        required: true
    },
    tertiaryColour:{
        type: String
    },
    bodyColour:{
        type: String,
        required: true
    },
    gradientMin:{
        type: String,
        required: true
    },
    gradientMax:{
        type: String,
        required: true
    },
    boxShadowTop:{
        type: String,
        required: true
    },
    boxShadowBottom:{
        type: String,
        required: true
    },
    buttonColour:{
        type: String
    },
    buttonHoverColour:{
        type: String
    },
    errorColour:{
        type: String
    },
    warningColour:{
        type: String
    },
    successColour:{
        type: String
    },
    infoColour:{
        type: String
    },
    underline:{
        type: String,
        required: true
    }
});

module.exports = mongoose.model("Theme", themeSchema);

checkForTheme = async(req,res) =>{
    let cookies = req.headers.cookie.split(";").filter(item=>item.split("=")[0].trim()=="theme");
    if(cookies.length == 0)return null;
    try{
        return await Theme.findOne({name:cookies[0].split("=")[1]});
    }catch(e){
        this.errorLog(e,req,res,`Error finding the theme: ${e}`);
        return null;
    }
}

<style>
    :root{
        --backgroundColour: <%= theme ? theme.backgroundColour : `#fff` %>;
        --backgroundGradient: <%= theme ? theme.backgroundGradient : `#eee` %>;
        --primaryColour: <%= theme ? theme.primaryColour : `#8C104E` %>;
        --secondaryColour: <%= theme ? theme.secondaryColour : `#203E7B` %>;
        --tertiaryColour: <%= theme && theme.tertiaryColour ? theme.tertiaryColour : `#1a72b0` %>;
        --bodyColour: <%= theme ? theme.bodyColour : `#232323` %>;

        --gradientMin: <%= theme ? theme.gradientMin : `#fff` %>;;
        --gradientMax:  <%= theme ? theme.gradientMax : `#eaeae9` %>;
        --boxShadowTop: <%= theme ? theme.boxShadowTop : `#ccc` %>;
        --boxShadowBottom: <%= theme ? theme.boxShadowBottom : `#8888` %>;

        --buttonColour:<%= theme && theme.buttonColour ? theme.buttonColour : `#ccc` %>;
        --buttonHoverColour: <%= theme && theme.buttonHoverColour ? theme.buttonHoverColour : `#fff` %>;

        --errorColour: <%= theme && theme.errorColour ? theme.errorColour : `red` %>;
        --warningColour: <%= theme && theme.warningColour ? theme.warningColour : `#ca6e3a` %>;
        --successColour: <%= theme && theme.successColour ? theme.successColour : `rgb(74, 240, 74)` %>;
        --infoColour: <%= theme && theme.infoColour ? theme.infoColour : `green` %>;

        --underline: <%= theme ? theme.underline : `#0004` %>;

        --box-shadow: inset 1px 1px 3px #0004;
        --box-shadow-hover: inset 5px 5px 10px #000a;
        --box-shadow-hover-small: inset 2px 2px 5px #0008;

        --mainFont: 'Antic Slab', sans-serif;
        --secondaryFont: 'Raleway', sans-serif;
    }
</style>